this is my confidential data In this case, the decision has been made to add the functionality to Midas Core. Since Spring makes it quite easy to add a REST controller to your application and the feature request is relatively minor, the decreased development time and deployment burden outweigh the benefits gained from a slightly cleaner architecture. If the added behavior evolves into something more complex in the future, it will require minimal effort to move the functionality to a different component. The decision to extract the behavior to a new component will be made later when more information about the future of the system is available. For example, if more endpoints need to be added which surface information from the database, that would be a good indicator that it’s time to break Midas Core into two separate components. Good software architecture is about elegance and balance - factors like development time and deployment burden should be just as much a part of your design calculus as clean organization.

Your final task is to expose a REST API for querying user balances. The API controller must expose a “/balance” endpoint that responds exclusively to GET requests, accepts a userId as a request parameter, and returns an instance of the provided Balance class serialized to JSON. Your spring application should expose this API on port 33400. If a user does not exist, the endpoint should return a balance of 0. You should integrate this REST Controller directly into Midas Core - it should run alongside the Kafka listener you’ve already implemented. When you’re finished, run “TaskFiveTests” and submit the output (including the begin and end tags) below. Do not modify the Balance class’ toString() implementation, or verification will fail. Be sure to have the Incentive API running when you execute the test. 

